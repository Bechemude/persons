{"version":3,"sources":["persons/core.cljs"],"mappings":";;AAUA,2BAAA,mFAAA,2CAAA,kDAAA,IAAA,8DAAA,mBAAA,iEAAA,aAAA,oDAAA,OAAA,0DAAA,mBAAA,4FAAA,2BAAA,2CAAA,kDAAA,IAAA,8DAAA,mBAAA,iEAAA,aAAA,oDAAA,OAAA,0DAAA,mBAAA,4FAAA,jlCAAKA;AAgBL,AAAA;AAAA,mBAAA,iBAAAC,WAAA,2BAAAC,qBAAAC,/FAAOM;AAAP,AAAA,IAAAL,aAAA,mFAAA,AAAAC,8BAAAH,sBAAAC;AAAA,AAAA;AACE,IAAAO,aAA4B,AAACQ,sBAAgBlB;kBAA7C,AAAAW,4CAAAD,WAAA,IAAA,zEAAOM;kBAAP,AAAAL,4CAAAD,WAAA,IAAA,zEAAeO;IAAfL,aACgC,sBAAA,tBAACM;gBADjC,AAAAP,4CAAAC,WAAA,IAAA,vEACOO;oBADP,AAAAR,4CAAAC,WAAA,IAAA,3EACiBQ;IADjBP,aAEkC,sBAAA,tBAACK;iBAFnC,AAAAP,4CAAAE,WAAA,IAAA,xEAEOQ;qBAFP,AAAAV,4CAAAE,WAAA,IAAA,5EAEkBS;IAFlBR,aAG0C,sBAAA,tBAACI;6BAH3C,AAAAP,4CAAAG,WAAA,IAAA,pFAGOS;uBAHP,AAAAZ,4CAAAG,WAAA,IAAA,9EAGwBU;IAHxBT,aAI+B,sBAAA,tBAACG;wBAJhC,AAAAP,4CAAAI,WAAA,IAAA,/EAIOU;iBAJP,AAAAd,4CAAAI,WAAA,IAAA,xEAImBW;AAJnB,AAsJQ,IAAAoB,iBAAA,AAAAC,oBAAA;AA/IL,0DAAA,kFAAA,2CAAA,hLAACpB,2OACW,WAAKC,7PA8IZ;AA9IO,AACE,qFAAA,6BAAA,jHAACF,2CAAAA,iDAAAA;;AACD,QAACT,4CAAAA,sDAAAA,ZAAYW,kCAAAA;GAH3B,uEAIkB,WAAKC;AAAL,AACE,qFAAA,6BAAA,jHAACH,2CAAAA,iDAAAA;;AACD,sHAAA,/GAACI,yGAAQD;;;qBA8GM,jBA2B9BmB;AAAA,AAAA,CAAAC,2DAAAA,yDAAAH,eAAAE,kBAAAC,qCAAAH,eAAAE;;AAvBL,OAAA,AAAAd,qCAAA,MAAA,iBAAAQ,WAAA,EAAA,YAAA;AAAA,AAAAA;KAAA,AAAA,AAAAR,qCAAA,KAAA,iBAAAS,WAAA,EAAA,YAAA;AAAA,AAAAA;KAAA,WAAA,AAAA,AAAAT,qCAAA,SAAA,iBAAAU,WAAA,EAAA,YAAA,uFAAA,UAAA;AA7G4B,IAAAb,WACC,6FAAA,mCAAA,/HAACT,+CAAAA,uDAAAA,tHA4G9B;IA7G4BU,WAEC,iGAAA,mCAAA,nIAACR,iDAAAA,uDAAAA;IAFFS,eAAC,2FAAA,gCAAA,1HAACb,8CAAAA,oDAAAA;AAAF,AAAA,QAAAa,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;AA6G5B,AAAAY;4DA1GE,AAAA,AAAAV,oEAAA,iBAAAC,WAAA,EAAA,sBAAA,8BAAA,gCAAA,3NACI,kBAAIV,wDACCY,uEAAgBrB,4BACMI,+BACCE,kCACEE,hQAqGpC;AA1GE,AAAAW;MA0GF,AAAA,AAAAD,qCAAA,KAAA,iBAAAW,WAAA,EAAA,YAAA;AAAA,AAAAA;uDA1GE,AAAA,AAAAX,oEAAA,iBAAAE,WAAA,EAAA,sBAAA,wBAAA,nLAOI,mCAAA,jCAAM,AAAOb,sEACRe,yEAAkBnB,uBACCE,8BACMG,rNAgGpC;AA1GE,AAAAY;MAOI;;AA7BX,AAAA,GAAA,AAAA9B;AAAA,IAAAC,WAAAN;AAAA,AAAA,AAAAO,gBAAAD,SAAA,cAAA;;AAAAA;;AAAAN;;;;AAAA;AAAA;AAAOQ,AAkCP,oBAAA,pBAAgC8B;kDAJnB,AAAA,AAAAL,sDAAA,xGAIb,AACE,OAACM,gFAAe/B,uBAAK,wBAAA,xBAACgC","names":["persons.core/table-mocks","G__33719","props__31811__auto__","maybe-ref__31812__auto__","vec__33720","helix.core/extract-cljs-props","goog/DEBUG","G__33757","goog.object/set","persons.core/app","vec__33723","cljs.core.nth","vec__33726","vec__33729","vec__33732","vec__33735","persons","set-persons","helix.hooks/use-state","person-id","set-person-id","modal-type","set-modal-type","is-modal-opened?","set-modal-opened","is-loading?","set-loaded","ajax.core.GET","response","error","cljs.core.println","G__33747","G__33748","fexpr__33746","helix.core/get-react","obj33752","obj33756","persons.components.table/table","persons.components.modal/modal","persons.core/init","js/module$node_modules$react_dom$index.render","js/document.getElementById","obj33741","obj33743","obj33745","obj33754","G__33738","helix.hooks/wrap-fx","G__33739","helix.hooks/raw-use-effect"],"sourcesContent":["(ns persons.core\n  (:require\n   [ajax.core :refer [GET POST PUT DELETE]]\n   [helix.core :refer [defnc $]]\n   [helix.hooks :as hooks]\n   [helix.dom :as d]\n   [\"react-dom\" :as rdom]\n   [persons.components.modal :refer [modal]]\n   [persons.components.table :refer [table]]))\n\n(def table-mocks [\n                  {:id 1\n                   :full-name \"Sirotin Alexandr\"\n                   :birth-date \"07.12.1991\"\n                   :sex \"male\"\n                   :address \"Saint-Petersburg\"\n                   :insurance-policy-number 1234123412341234}\n                  {:id 2\n                   :full-name \"Sirotin Alexandr\"\n                   :birth-date \"07.12.1991\"\n                   :sex \"male\"\n                   :address \"Saint-Petersburg\"\n                   :insurance-policy-number 1234123412341234}])\n\n;; TODO: delete mocks\n\n(defnc app []\n  (let [[persons set-persons] (hooks/use-state table-mocks)\n        [person-id set-person-id] (hooks/use-state nil)\n        [modal-type set-modal-type] (hooks/use-state nil)\n        [is-modal-opened? set-modal-opened] (hooks/use-state false)\n        [is-loading? set-loaded] (hooks/use-state false)]\n    (hooks/use-effect\n     :once\n     (GET \"http://localhost:8080/persons\"\n       {:handler (fn [response]\n                   (set-loaded true)\n                   (set-persons response))\n        :error-handler (fn [error]\n                         (set-loaded true)\n                         (println error \"error\"))}))\n    (d/div {:class \"flex flex-col\"}\n           (d/h1 {:class \"text-4xl pb-4 text-center\"} \"Persons\")\n           (d/button {:class \"w-11/12 m-auto p-2 mb-4\n                              bg-gray-100 hover:bg-gray-200\"\n                      :on-click #((set-person-id nil)\n                                  (set-modal-type \"edit\")\n                                  (set-modal-opened true))}\n                     \"Add new person\")\n           (if is-loading?\n             ($ table {:persons persons\n                       :set-person-id set-person-id\n                       :set-modal-type set-modal-type\n                       :set-modal-opened set-modal-opened})\n             (d/h2 {:class \"text-xl pt-4 text-center\"} \"Loading...\"))\n           (when (true? is-modal-opened?)\n             ($ modal {:person-id person-id\n                       :modal-type modal-type\n                       :set-modal-opened set-modal-opened})))))\n\n(defn ^:export ^:dev/after-load init []\n  (rdom/render ($ app) (js/document.getElementById \"app\")))\n"]}